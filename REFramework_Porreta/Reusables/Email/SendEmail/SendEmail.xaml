<Activity mc:Ignorable="sap sap2010" x:Class="SendEmail" this:SendEmail.in_BodyHtmlFilePath="Data/HtmlTemplates/Body.html" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Path for the baseline html file." Name="in_BodyHtmlFilePath" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Subject of the email." Name="in_Subject" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="List of emails that will receive the email." Name="in_Recipients" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="List of emails that will receive the email as CC." Name="in_CC" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="List of emails that will receive the email as BCC." Name="in_BCC" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="Array of folder paths to be checked. If a folder exists, its immediate file contents will be added to the attachments list. This is a non-recursive search." Name="in_AttachmentsFolders" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="Array of individual file paths. If the file exists, it will be appended to the attachments list." Name="in_AttachmentsFiles" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary of keys and values to be replaced in the Body html. &#xA;keys that appear as {{key}} in the html will be replaced by the value assigned in this dictionary." Name="in_TextReplacements" Type="InArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary of images and its paths to be replaced in the Body html. &#xA;keys that appear as {{image}} in the html will be replaced by the value assigned in this dictionary." Name="in_ImageReplacements" Type="InArgument(scg:Dictionary(x:String, x:String))" />
    <x:Property sap2010:Annotation.AnnotationText="Dictionary of tables to be replaced in the Body html. &#xA;keys that appear as {{table}} in the html will be replaced by the value assigned in this dictionary." Name="in_TableReplacements" Type="InArgument(scg:Dictionary(x:String, sd:DataTable))" />
  </x:Members>
  <this:SendEmail.in_Subject>
    <InArgument x:TypeArguments="x:String" />
  </this:SendEmail.in_Subject>
  <this:SendEmail.in_AttachmentsFolders>
    <InArgument x:TypeArguments="s:String[]" />
  </this:SendEmail.in_AttachmentsFolders>
  <this:SendEmail.in_AttachmentsFiles>
    <InArgument x:TypeArguments="s:String[]" />
  </this:SendEmail.in_AttachmentsFiles>
  <this:SendEmail.in_ImageReplacements>
    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" />
  </this:SendEmail.in_ImageReplacements>
  <this:SendEmail.in_TableReplacements>
    <InArgument x:TypeArguments="scg:Dictionary(x:String, sd:DataTable)" />
  </this:SendEmail.in_TableReplacements>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1380.6666666666667,912.6666666666666</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>SendEmail_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Mail.SMTP.Activities</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>UiPath.Core.Activities.Storage</x:String>
      <x:String>UiPath.Core.Activities.Orchestrator</x:String>
      <x:String>System.Linq.Expressions</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Net.Mail</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="## Purpose&#xA;This workflow is responsible for composing and sending email with dynamic content and optional attachments. It prepares the email body using an HTML template with variable replacements and builds the attachments list from given folders and files before sending the final message.&#xA;&#xA;## Input Arguments&#xA;- in_BodyHtmlFilePath (InArgument&lt;String&gt;)&#xA;  Path to the baseline HTML file used as the template for the email body.&#xA;&#xA;- in_Subject (InArgument&lt;String&gt;)&#xA;  Subject line of the email to be sent.&#xA;&#xA;- in_AttachmentsFolders (InArgument&lt;String[]&gt;)&#xA;  Array of folder paths to be searched for attachments. Only files at the top level are considered (non-recursive).&#xA;&#xA;- in_AttachmentsFiles (InArgument&lt;String[]&gt;)&#xA;  Array of individual file paths that should be attached to the email if they exist.&#xA;&#xA;- in_TextReplacements (InArgument&lt;Dictionary&lt;String, String&gt;&gt;)&#xA;  Dictionary containing text placeholders and their replacement values. Placeholders should be in the format `{{key}}` in the HTML file.&#xA;&#xA;- in_ImageReplacements (InArgument&lt;Dictionary&lt;String, String&gt;&gt;)&#xA;  Dictionary mapping image placeholders to their file paths. The workflow will embed them as Base64-encoded images.&#xA;&#xA;- in_TableReplacements (InArgument&lt;Dictionary&lt;String, DataTable&gt;&gt;)&#xA;  Dictionary of table placeholders and corresponding `DataTable` objects to be rendered as HTML tables in the email.&#xA;&#xA;## Output Arguments&#xA;- None&#xA;&#xA;## Workflow Structure&#xA;The workflow first defines the recipients list and invokes the `Metadata_BuildBody` workflow to generate the final HTML content using provided replacements. Then, it calls the `Metadata_Attachments` workflow to build the attachments list from folders and files. Finally, it invokes `SendEmail_IntegrationsService` to send the email with all components (subject, body, recipients, attachments, CC, BCC).&#xA;&#xA;## Error Handling&#xA;Each invoked workflow handles its own internal validations. Missing folders or files for attachments trigger warning logs in `Metadata_Attachments`, and invalid replacements in `Metadata_BuildBody` are handled without throwing exceptions. The main workflow does not explicitly throw errors but relies on child workflows to manage exceptions internally." DisplayName="SendEmail" sap:VirtualizedContainerService.HintSize="1417.3333333333333,804.6666666666666" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="BodyAsHtml" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="Attachments" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Metadata_BuildBody - Invoke Workflow File (Reusables\Email\Metadata\Metadata_BuildBody.xaml)" sap:VirtualizedContainerService.HintSize="450,210" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="Reusables\Email\Metadata\Metadata_BuildBody.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="in_BodyHtmlFilePath">[in_BodyHtmlFilePath]</InArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="out_Body">[BodyAsHtml]</OutArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_TextReplacements">[in_TextReplacements]</InArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:String)" x:Key="in_ImageReplacements">[in_ImageReplacements]</InArgument>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, sd:DataTable)" x:Key="in_TableReplacements">[in_TableReplacements]</InArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Metadata_Attachments - Invoke Workflow File (Reusables\Email\Metadata\Metadata_Attachments.xaml)" sap:VirtualizedContainerService.HintSize="450,210" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="Reusables\Email\Metadata\Metadata_Attachments.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_Folders">[in_AttachmentsFolders]</InArgument>
        <InArgument x:TypeArguments="s:String[]" x:Key="in_Files">[in_AttachmentsFiles]</InArgument>
        <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="out_AttachmentsPaths">[Attachments]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <Sequence DisplayName="Send email" sap:VirtualizedContainerService.HintSize="450,283.3333333333333" sap2010:WorkflowViewState.IdRef="Sequence_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="SendEmail_IntegrationsService - Invoke Workflow File (Reusables\Email\SendEmail\SendEmail_IntegrationsService.xaml)" sap:VirtualizedContainerService.HintSize="416,200.66666666666666" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="Reusables\Email\SendEmail\SendEmail_IntegrationsService.xaml">
        <ui:InvokeWorkflowFile.Arguments>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_Recipients">[in_Recipients]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Subject">[in_Subject]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="in_Body">[BodyAsHtml]</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_Attachments">[Attachments.ToArray]</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_CC">[in_CC]</InArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="in_BCC">[in_BCC]</InArgument>
        </ui:InvokeWorkflowFile.Arguments>
      </ui:InvokeWorkflowFile>
    </Sequence>
  </Sequence>
</Activity>